const Person = require('./Person')
const Plane = require('./Plane')

describe("Plane", () => {
    test("has a capacity", () => {
        const plane = new Plane("MAD", 2, 5)
        expect(plane.crewCapacity).toBe(2)
        expect(plane.passengerCapacity).toBe(5)
    })
    test("can have passengers", () => {
        const passenger = new Person.Passenger("Isabella")
        const plane = new Plane("MAD", 4, 25)
        plane.boardPlane(passenger)
        expect(plane.passengers).toContainEqual(passenger)
    })
    test("can have crew", () => {
        const crew = new Person.Crew("Isabella")
        const plane = new Plane("MAD", 4, 25)
        plane.boardPlane(crew)
        expect(plane.crew).toContainEqual(crew)
    })
    test("can't have more crew than needed", () => {
        const plane = new Plane("MAD", 1, 2)
        const crewA = new Person.Crew("Isabella")
        const crewB = new Person.Crew("Matt")
        plane.boardPlane(crewA)
        expect(()=> plane.boardPlane(crewB)).toThrowError("no more staff needed")
    })
    test("can't have more passengers than capacity", () => {
        const plane = new Plane("MAD", 1, 2)
        const passengerA = new Person.Passenger("Isabella")
        const passengerB = new Person.Passenger("Matt")
        const passengerC = new Person.Passenger("Kanye")
        plane.boardPlane(passengerA)
        plane.boardPlane(passengerB)
        expect(()=> plane.boardPlane(passengerC)).toThrowError("plane is full")
    })
    // test("crew can cross check", () => {
    //     const crew1 = new Person.Crew("Isabella")
    //     const crew2 = new Person.Crew("Matt")
    //     const plane = new Plane("MAD", 4, 25)
    //     plane.boardPlane(crew1)
    //     plane.boardPlane(crew2)
    //     expect(plane.crew.crossCheck).toBe(true)
    // })
})